name: Spring Boot CI/CD

on:    # 어떤 조건에서 workflow를 실행할지 컨디션을 적어준다
  push:
    branches:
      - develop
      - main    # 배포 브랜치는 main이기 때문에 향후 수정이 필요하다.
  pull_request:
    branches:
      - develop
      - main

  workflow_dispatch:    # 해당 옵션을 통해 사용자가 직접 Actions 탭에서 workflow를 실행시킬 수 있다.

permissions:
  contents: read

jobs:
  github-ci-cd:
    runs-on: ubuntu-latest  # CI 서버 runner가 어떤 환경을 갖출 것인가?
    steps:
      # uses 키워드를 통해 Action을 불러올 수 있다.
      # 해당 레포지토리로 체크아웃하여 레포지토리에 접근할 수 있는 action을 불러온다.
      - uses: actions/checkout@v3   # 깃허브 액션과 연결된 레포지토리의 코드를 runner로 옮기는 것

      - name: create application-docker.yml
        run: |
          cd ./src/main/resources
          touch ./application-docker.yml
          echo "${{ secrets.DATABASE_FOR_DOCKER }}" >> ./application-docker.yml

      - name: create application-s3.yml
        run: |
          cd ./src/main/resources
          touch ./application-s3.yml
          echo "${{ secrets.S3_CONFIG }}" >> ./application-s3.yml

      - name: create .env
        run: |
          touch ./.env
          echo "${{ secrets.ENV }}" >> ./.env

      - name: Set up JDK 11    # JDK 11 버전으로 작성된 프로젝트이기 때문에 이에 맞춰 setup
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Gradle Caching    # 매번 의존성 다운하는 것을 줄이기 위해 캐싱한다.
        uses: actions/cache@v3
        with:
          path: |     # 캐시의 저장과 복원에 사용되는 runner 내 파일 경로
            ~/.gradle/caches
            ~/.gradle/wrapper
          # 캐시를 저장, 복원할 때 사용하는 키, 여러 값들을 조합해서 512자 제한으로 생성할 수 있다.
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |     # 내가 설정한 key로 캐시 미스가 발생할 때 사용할 수 있는 후보군 키들
            ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build

      - name: Test with Gradle
        run: ./gradlew test

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Dockerfile Build
        # 무중단 배포를 위한 그린, 블루
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tab-backend:blue .
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tab-backend:green .

        # dockerhub의 레포지토리 이름과 도커 이미지 이름을 똑같이 해줘야 한다.
      - name: Dockerfile push to repo
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/tab-backend:blue
          docker push ${{ secrets.DOCKER_USERNAME }}/tab-backend:green

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          envs: GITHUB_SHA
          script: |
#            chmod +x ./deploy.sh
#            ./deploy.sh